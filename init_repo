#!/bin/bash

# ---------------------------------------------------------------------------------------------------------------------

usage() {
  echo "Usage: $(basename "$0") [options]"
  echo 
  echo "Options:"
  echo "  -n, --name NAME          Repository name (required)"
  echo "  -e, --environment ENV    Development environment template (default: python)"
  echo "  -d, --description DESC   Repository description (default: empty)"
  echo "  -v, --visibility VIS     Repository visibility (public/private, default: private)"
  echo "  -c, --clone-dir DIR      Directory to clone repo into (default: current directory)"
  echo "  -o, --owner OWNER        Owner of the deven repository (default: rennochj)"
  echo "  -r, --repo REPO          Deven repository name (default: deven)"
  echo "  -b, --branch BRANCH      Branch to use (default: main)"
  echo "  -h, --help               Show this help message"
  echo
  echo "Example:"
  echo "  $(basename "$0") -n myproject -e python -d \"My awesome project\" -v public"
}

# ---------------------------------------------------------------------------------------------------------------------

create_repo() {
 
    # Set default values
    local REPO_NAME=""
    local DESCRIPTION=""
    local VISIBILITY="private"
    local CLONE_DIR="${CLONE_DIR:-.}"

    REPO_NAME="$1"
    
    if [ "$#" -ge 2 ]; then
        DESCRIPTION="$2"
    fi
    
    if [ "$#" -ge 3 ]; then
        if [ "$3" = "public" ] || [ "$3" = "private" ]; then
            VISIBILITY="$3"
        else
            echo "Warning: Visibility must be 'public' or 'private'. Defaulting to 'private'."
        fi
    fi
    
    if [ "$#" -ge 4 ]; then
        GITIGNORE_TEMPLATE="$4"
    fi

    # Create base repository
    echo "Creating repository $REPO_NAME..."
    local CREATE_CMD="gh repo create $REPO_NAME --${VISIBILITY} --description \"$DESCRIPTION\""
    
    eval $CREATE_CMD

    if [ $? -ne 0 ]; then
        echo "Error: Failed to create repository."
        exit 1
    fi
        
    # Get the username
    USERNAME=$(gh api user | jq -r '.login')
    
    # Clone the repository
    echo "Cloning repository to $CLONE_DIR/$REPO_NAME..."
    git clone "https://github.com/$USERNAME/$REPO_NAME.git" "$CLONE_DIR/$REPO_NAME"
    
    if [ $? -eq 0 ]; then
        cd "$CLONE_DIR/$REPO_NAME"
        
        # Create README.md if it doesn't exist
        if [ ! -f "README.md" ]; then
            echo "# $REPO_NAME" > README.md
            echo "" >> README.md
            echo "$DESCRIPTION" >> README.md
            
            git add README.md
            git commit -m "Add README.md"
            git push origin main
        fi
        
        echo "Repository has been cloned to $CLONE_DIR/$REPO_NAME"
    else
        echo "Error: Failed to clone repository."
    fi

    echo "Repository URL: https://github.com/$USERNAME/$REPO_NAME"
    echo "Done!"
}

# ---------------------------------------------------------------------------------------------------------------------

download_folder() {
    local owner="$1"
    local repo="$2"
    local path="$3"
    local branch="$4"
    local destination="$5"
    local original_path="$6"
    local temp_dir="$7"

    # If this is the first call, setup original path
    if [ -z "$original_path" ]; then
        original_path="$path"
    fi
    
    # If this is the first call, create temp directory
    if [ -z "$temp_dir" ]; then
        temp_dir=$(mktemp -d)
        trap 'rm -rf "$temp_dir"' EXIT
    fi
    
    echo "Downloading folder $path from $owner/$repo repository ($branch branch)..."
    
    # Use gh api to download the folder contents and metadata
    mkdir -p "$temp_dir/contents"
    gh api "repos/$owner/$repo/contents/$path?ref=$branch" > "$temp_dir/folder_contents_$(echo "$path" | tr '/' '_').json"
    
    if [ $? -ne 0 ]; then
        echo "Error: Failed to get contents of the folder $path. Make sure the repository, branch, and folder exist."
        return 1
    fi
    
    # Calculate relative path for destination
    local rel_dest="$destination"
    if [ "$path" != "$original_path" ]; then
        rel_path=${path#$original_path/}
        rel_dest="$destination/$rel_path"
    fi
    
    # Create destination directory if it doesn't exist
    mkdir -p "$rel_dest"
    
    # Download each file in the folder
    local folder_json="$temp_dir/folder_contents_$(echo "$path" | tr '/' '_').json"
    
    # Process files
    jq -r '.[] | select(.type=="file") | [.download_url, .name] | @tsv' "$folder_json" | \
    while read -r url name; do
        echo "Downloading $name to $rel_dest..."
        curl -s "$url" -o "$rel_dest/$name"
    done
    
    # Process directories
    local subdirs=($(jq -r '.[] | select(.type=="dir") | .path' "$folder_json"))
    
    for subdir in "${subdirs[@]}"; do
        echo "Processing subdirectory: $subdir"
        download_folder "$owner" "$repo" "$subdir" "$branch" "$destination" "$original_path" "$temp_dir"
    done
}

# ---------------------------------------------------------------------------------------------------------------------

# Main script execution
main() {
    # Default values
    local DEVEN_OWNER="$(gh api user | jq -r '.login')"
    local DEVEN_REPO="deven"
    local DEVEN_BRANCH="main"
    local TARGET_FOLDER="."
    local REPO_NAME=""
    local DEVEN_ENVIRONMENT="python"
    local REPO_DESCRIPTION=""
    local REPO_VISIBILITY="private" 
    local CLONE_DIR="."
    
    # Parse command line options
    while getopts "n:e:d:v:c:o:r:b:h-:" opt; do
        case ${opt} in
            -)
                case "${OPTARG}" in
                    name)
                        REPO_NAME="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    environment)
                        DEVEN_ENVIRONMENT="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    description)
                        REPO_DESCRIPTION="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    visibility)
                        REPO_VISIBILITY="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    clone-dir)
                        CLONE_DIR="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    owner)
                        DEVEN_OWNER="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    repo)
                        DEVEN_REPO="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    branch)
                        DEVEN_BRANCH="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    help)
                        usage
                        exit 0
                        ;;
                    *)
                        echo "Invalid option: --${OPTARG}" >&2
                        usage
                        exit 1
                        ;;
                esac
                ;;
            n)
                REPO_NAME="${OPTARG}"
                ;;
            e)
                DEVEN_ENVIRONMENT="${OPTARG}"
                ;;
            d)
                REPO_DESCRIPTION="${OPTARG}"
                ;;
            v)
                REPO_VISIBILITY="${OPTARG}"
                ;;
            c)
                CLONE_DIR="${OPTARG}"
                ;;
            o)
                DEVEN_OWNER="${OPTARG}"
                ;;
            r)
                DEVEN_REPO="${OPTARG}"
                ;;
            b)
                DEVEN_BRANCH="${OPTARG}"
                ;;
            h)
                usage
                exit 0
                ;;
            \?)
                echo "Invalid option: -${OPTARG}" >&2
                usage
                exit 1
                ;;
            :)
                echo "Option -${OPTARG} requires an argument." >&2
                usage
                exit 1
                ;;
        esac
    done
    
    # Check if repository name was provided
    if [ -z "$REPO_NAME" ]; then
        echo "Error: Repository name is required."
        usage
        return 1
    fi
    
    local DESTINATION="$CLONE_DIR/$REPO_NAME"
    
    # Check if gh is installed
    if ! command -v gh &> /dev/null; then
        echo "Error: GitHub CLI (gh) is not installed."
        echo "Please install it using: brew install gh"
        echo "Then authenticate using: gh auth login"
        return 1
    fi
    
    # Validate repository visibility
    if [ "$REPO_VISIBILITY" != "public" ] && [ "$REPO_VISIBILITY" != "private" ]; then
        echo "Warning: Visibility must be 'public' or 'private'. Defaulting to 'private'."
        REPO_VISIBILITY="private"
    fi
    
    create_repo "$REPO_NAME" "$REPO_DESCRIPTION" "$REPO_VISIBILITY" "$REPO_VISIBILITY"

    download_folder "$DEVEN_OWNER" "$DEVEN_REPO" "$DEVEN_ENVIRONMENT" "$DEVEN_BRANCH" "$TARGET_FOLDER"

    cd "$TARGET_FOLDER" || exit 1

    git add -A .
    git commit -m "initial commit with files from $DEVEN_ENVIRONMENT"
    git push origin main

    echo "Done! Repository '$REPO_NAME' has been created and initialized with files from '$DEVEN_ENVIRONMENT'"
}

# ---------------------------------------------------------------------------------------------------------------------

# Check if no arguments were provided
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

main "$@"
